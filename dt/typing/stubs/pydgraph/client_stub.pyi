from typing import Any, Dict

from grpc import Channel, ChannelCredentials
from pydgraph import Operation
from pydgraph.meta import VERSION as VERSION
from pydgraph.proto.api_pb2 import Check, LoginRequest, Response, TxnContext
from pydgraph.proto.api_pb2_grpc import DgraphStub

__maintainer__: str
__status__: str

class DgraphClientStub:
    channel: Channel
    stub: DgraphStub
    def __init__(self, addr: str = ..., credentials: ChannelCredentials | None = ..., options: Dict[str, Any] | None = ...) -> None: ...
    def login(self, login_req:LoginRequest, timeout: float | None = ..., metadata: Any | None = ..., credentials: Any | None = ...)->Response: ...
    def alter(self, operation:Operation, timeout: float | None = ..., metadata: Any | None = ..., credentials: Any | None = ...)->Response: ...
    def async_alter(self, operation:Operation, timeout: float | None = ..., metadata: Any | None = ..., credentials: Any | None = ...)->Any: ...
    def query(self, req:Any, timeout: float | None = ..., metadata: Any | None = ..., credentials: Any | None = ...)->Response: ...
    def async_query(self, req:Any, timeout: float | None = ..., metadata: Any | None = ..., credentials: Any | None = ...)->Any: ...
    def commit_or_abort(self, ctx:TxnContext, timeout: float | None = ..., metadata: Any | None = ..., credentials: Any | None = ...)->Response: ...
    def check_version(self, check:Check, timeout: float | None = ..., metadata: Any | None = ..., credentials: Any | None = ...)->Response: ...
    def close(self) -> None: ...
    @staticmethod
    def from_slash_endpoint(cloud_endpoint:str, api_key:str) -> DgraphClientStub: ...
    @staticmethod
    def from_cloud(cloud_endpoint:str, api_key:str) -> DgraphClientStub: ...
